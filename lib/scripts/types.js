"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.queries = exports.ExperimentalGetTinaClient = exports.getSdk = exports.PageConnectionDocument = exports.PageDocument = exports.GlobalConnectionDocument = exports.GlobalDocument = exports.SerieConnectionDocument = exports.SerieDocument = exports.SeriesLatestsQueryDocument = exports.SeriesFeaturedQueryDocument = exports.SeriesPublishedQueryDocument = exports.SerieQueryDocument = exports.ContentQueryDocument = exports.PageQueryDocument = exports.PagePartsFragmentDoc = exports.SeriePartsFragmentDoc = exports.LayoutQueryFragmentFragmentDoc = exports.GlobalPartsFragmentDoc = exports.gql = void 0;
//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
function gql(strings) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var str = '';
    strings.forEach(function (string, i) {
        str += string + (args[i] || '');
    });
    return str;
}
exports.gql = gql;
exports.GlobalPartsFragmentDoc = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    fragment GlobalParts on Global {\n  header {\n    __typename\n    iconMenu {\n      __typename\n      color\n      size\n      name\n    }\n    iconClose {\n      __typename\n      color\n      size\n      name\n    }\n    nav {\n      __typename\n      href\n      label\n    }\n  }\n  footer {\n    __typename\n    links {\n      __typename\n      href\n      label\n    }\n    social {\n      __typename\n      href\n      label\n    }\n  }\n  theme {\n    __typename\n    mono\n    color\n    font\n    icon\n    darkMode\n  }\n}\n    "], ["\n    fragment GlobalParts on Global {\n  header {\n    __typename\n    iconMenu {\n      __typename\n      color\n      size\n      name\n    }\n    iconClose {\n      __typename\n      color\n      size\n      name\n    }\n    nav {\n      __typename\n      href\n      label\n    }\n  }\n  footer {\n    __typename\n    links {\n      __typename\n      href\n      label\n    }\n    social {\n      __typename\n      href\n      label\n    }\n  }\n  theme {\n    __typename\n    mono\n    color\n    font\n    icon\n    darkMode\n  }\n}\n    "])));
exports.LayoutQueryFragmentFragmentDoc = gql(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    fragment LayoutQueryFragment on Query {\n  global(relativePath: \"index.json\") {\n    ...GlobalParts\n  }\n}\n    ", ""], ["\n    fragment LayoutQueryFragment on Query {\n  global(relativePath: \"index.json\") {\n    ...GlobalParts\n  }\n}\n    ", ""])), exports.GlobalPartsFragmentDoc);
exports.SeriePartsFragmentDoc = gql(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    fragment SerieParts on Serie {\n  seo {\n    __typename\n    title\n    description\n  }\n  title\n  description\n  summary\n  meta {\n    __typename\n    cover\n    camera\n    film\n    map {\n      __typename\n      promoted\n      locations {\n        __typename\n        name\n        country\n        latitude\n        longitude\n      }\n    }\n    shot {\n      __typename\n      start\n      end\n    }\n    tags\n  }\n  _body\n  publishedAt\n  isFeatured\n  isPublished\n}\n    "], ["\n    fragment SerieParts on Serie {\n  seo {\n    __typename\n    title\n    description\n  }\n  title\n  description\n  summary\n  meta {\n    __typename\n    cover\n    camera\n    film\n    map {\n      __typename\n      promoted\n      locations {\n        __typename\n        name\n        country\n        latitude\n        longitude\n      }\n    }\n    shot {\n      __typename\n      start\n      end\n    }\n    tags\n  }\n  _body\n  publishedAt\n  isFeatured\n  isPublished\n}\n    "])));
exports.PagePartsFragmentDoc = gql(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    fragment PageParts on Page {\n  seo {\n    __typename\n    title\n    description\n  }\n  blocks {\n    __typename\n    ... on PageBlocksHero {\n      tagline\n      headline\n      text\n      type\n      image {\n        __typename\n        src\n        alt\n      }\n    }\n    ... on PageBlocksFeatured {\n      title\n    }\n    ... on PageBlocksLatests {\n      title\n    }\n    ... on PageBlocksContent {\n      body\n      color\n    }\n  }\n}\n    "], ["\n    fragment PageParts on Page {\n  seo {\n    __typename\n    title\n    description\n  }\n  blocks {\n    __typename\n    ... on PageBlocksHero {\n      tagline\n      headline\n      text\n      type\n      image {\n        __typename\n        src\n        alt\n      }\n    }\n    ... on PageBlocksFeatured {\n      title\n    }\n    ... on PageBlocksLatests {\n      title\n    }\n    ... on PageBlocksContent {\n      body\n      color\n    }\n  }\n}\n    "])));
exports.PageQueryDocument = gql(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n    query pageQuery {\n  ...LayoutQueryFragment\n  serieConnection {\n    edges {\n      node {\n        id\n        _values\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    ", ""], ["\n    query pageQuery {\n  ...LayoutQueryFragment\n  serieConnection {\n    edges {\n      node {\n        id\n        _values\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    ", ""])), exports.LayoutQueryFragmentFragmentDoc);
exports.ContentQueryDocument = gql(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    query contentQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  page(relativePath: $relativePath) {\n    ...PageParts\n  }\n}\n    ", "\n", ""], ["\n    query contentQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  page(relativePath: $relativePath) {\n    ...PageParts\n  }\n}\n    ", "\n", ""])), exports.LayoutQueryFragmentFragmentDoc, exports.PagePartsFragmentDoc);
exports.SerieQueryDocument = gql(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    query serieQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  serie(relativePath: $relativePath) {\n    ...SerieParts\n  }\n}\n    ", "\n", ""], ["\n    query serieQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  serie(relativePath: $relativePath) {\n    ...SerieParts\n  }\n}\n    ", "\n", ""])), exports.LayoutQueryFragmentFragmentDoc, exports.SeriePartsFragmentDoc);
exports.SeriesPublishedQueryDocument = gql(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n    query seriesPublishedQuery {\n  serieConnection(filter: {isPublished: {eq: true}}) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "], ["\n    query seriesPublishedQuery {\n  serieConnection(filter: {isPublished: {eq: true}}) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "])));
exports.SeriesFeaturedQueryDocument = gql(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n    query seriesFeaturedQuery {\n  serieConnection(\n    sort: \"publishedAt\"\n    filter: {isPublished: {eq: true}, isFeatured: {eq: true}}\n  ) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "], ["\n    query seriesFeaturedQuery {\n  serieConnection(\n    sort: \"publishedAt\"\n    filter: {isPublished: {eq: true}, isFeatured: {eq: true}}\n  ) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "])));
exports.SeriesLatestsQueryDocument = gql(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n    query seriesLatestsQuery {\n  serieConnection(sort: \"publishedAt\", filter: {isPublished: {eq: true}}) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "], ["\n    query seriesLatestsQuery {\n  serieConnection(sort: \"publishedAt\", filter: {isPublished: {eq: true}}) {\n    edges {\n      node {\n        title\n        description\n        summary\n        meta {\n          cover\n          camera\n          film\n          tags\n        }\n        id\n        publishedAt\n        isPublished\n        _sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    "])));
exports.SerieDocument = gql(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n    query serie($relativePath: String!) {\n  serie(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...SerieParts\n  }\n}\n    ", ""], ["\n    query serie($relativePath: String!) {\n  serie(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...SerieParts\n  }\n}\n    ", ""])), exports.SeriePartsFragmentDoc);
exports.SerieConnectionDocument = gql(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n    query serieConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SerieFilter) {\n  serieConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...SerieParts\n      }\n    }\n  }\n}\n    ", ""], ["\n    query serieConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SerieFilter) {\n  serieConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...SerieParts\n      }\n    }\n  }\n}\n    ", ""])), exports.SeriePartsFragmentDoc);
exports.GlobalDocument = gql(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n    query global($relativePath: String!) {\n  global(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...GlobalParts\n  }\n}\n    ", ""], ["\n    query global($relativePath: String!) {\n  global(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...GlobalParts\n  }\n}\n    ", ""])), exports.GlobalPartsFragmentDoc);
exports.GlobalConnectionDocument = gql(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {\n  globalConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...GlobalParts\n      }\n    }\n  }\n}\n    ", ""], ["\n    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {\n  globalConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...GlobalParts\n      }\n    }\n  }\n}\n    ", ""])), exports.GlobalPartsFragmentDoc);
exports.PageDocument = gql(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n    query page($relativePath: String!) {\n  page(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...PageParts\n  }\n}\n    ", ""], ["\n    query page($relativePath: String!) {\n  page(relativePath: $relativePath) {\n    ... on Document {\n      _sys {\n        filename\n        basename\n        breadcrumbs\n        path\n        relativePath\n        extension\n      }\n      id\n    }\n    ...PageParts\n  }\n}\n    ", ""])), exports.PagePartsFragmentDoc);
exports.PageConnectionDocument = gql(templateObject_16 || (templateObject_16 = __makeTemplateObject(["\n    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {\n  pageConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...PageParts\n      }\n    }\n  }\n}\n    ", ""], ["\n    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {\n  pageConnection(\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    sort: $sort\n    filter: $filter\n  ) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    totalCount\n    edges {\n      node {\n        ... on Document {\n          _sys {\n            filename\n            basename\n            breadcrumbs\n            path\n            relativePath\n            extension\n          }\n          id\n        }\n        ...PageParts\n      }\n    }\n  }\n}\n    ", ""])), exports.PagePartsFragmentDoc);
function getSdk(requester) {
    return {
        pageQuery: function (variables, options) {
            return requester(exports.PageQueryDocument, variables, options);
        },
        contentQuery: function (variables, options) {
            return requester(exports.ContentQueryDocument, variables, options);
        },
        serieQuery: function (variables, options) {
            return requester(exports.SerieQueryDocument, variables, options);
        },
        seriesPublishedQuery: function (variables, options) {
            return requester(exports.SeriesPublishedQueryDocument, variables, options);
        },
        seriesFeaturedQuery: function (variables, options) {
            return requester(exports.SeriesFeaturedQueryDocument, variables, options);
        },
        seriesLatestsQuery: function (variables, options) {
            return requester(exports.SeriesLatestsQueryDocument, variables, options);
        },
        serie: function (variables, options) {
            return requester(exports.SerieDocument, variables, options);
        },
        serieConnection: function (variables, options) {
            return requester(exports.SerieConnectionDocument, variables, options);
        },
        global: function (variables, options) {
            return requester(exports.GlobalDocument, variables, options);
        },
        globalConnection: function (variables, options) {
            return requester(exports.GlobalConnectionDocument, variables, options);
        },
        page: function (variables, options) {
            return requester(exports.PageDocument, variables, options);
        },
        pageConnection: function (variables, options) {
            return requester(exports.PageConnectionDocument, variables, options);
        }
    };
}
exports.getSdk = getSdk;
// TinaSDK generated code
var client_1 = require("tinacms/dist/client");
var generateRequester = function (client) {
    var requester = function (doc, vars, _options) { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.request({
                        query: doc,
                        variables: vars
                    })];
                case 1:
                    data = _a.sent();
                    return [2 /*return*/, { data: data === null || data === void 0 ? void 0 : data.data, query: doc, variables: vars || {} }];
            }
        });
    }); };
    return requester;
};
/**
 * @experimental this class can be used but may change in the future
 **/
var ExperimentalGetTinaClient = function () {
    return getSdk(generateRequester((0, client_1.createClient)({ url: "http://localhost:4001/graphql", queries: exports.queries })));
};
exports.ExperimentalGetTinaClient = ExperimentalGetTinaClient;
var queries = function (client) {
    var requester = generateRequester(client);
    return getSdk(requester);
};
exports.queries = queries;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16;
