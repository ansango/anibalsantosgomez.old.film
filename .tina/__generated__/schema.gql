# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  serie(relativePath: String): Serie!
  serieConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SerieFilter): SerieConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  serie: SerieFilter
  page: PageFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Serie | Page | Global

type SerieMetaShot {
  start: String
  end: String
}

type SerieMeta {
  publishedAt: String
  camera: String
  film: String
  shot: SerieMetaShot
  tags: [String]
}

type SerieThumbnailsFirstThumbnail {
  url: String
  centerImage: String
}

type SerieThumbnailsSecondThumbnail {
  url: String
  centerImage: String
}

type SerieThumbnailsThirdThumbnail {
  url: String
  centerImage: String
}

type SerieThumbnails {
  firstThumbnail: SerieThumbnailsFirstThumbnail
  secondThumbnail: SerieThumbnailsSecondThumbnail
  thirdThumbnail: SerieThumbnailsThirdThumbnail
}

type SerieBlocksHeroSerie {
  visible: Boolean
}

type SerieBlocksBodySimple {
  visible: Boolean
  content: JSON
  size: String
  center: String
  align: String
  paddingTop: String
  paddingBottom: String
}

type SerieBlocksMasonryFSColumns {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

type SerieBlocksMasonryFSGap {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

type SerieBlocksMasonryFSImages {
  label: String
  url: String!
  aspectRatio: String!
  centerImage: String!
}

type SerieBlocksMasonryFS {
  label: String
  visible: Boolean
  columns: SerieBlocksMasonryFSColumns
  gap: SerieBlocksMasonryFSGap
  images: [SerieBlocksMasonryFSImages]
}

union SerieBlocks = SerieBlocksHeroSerie | SerieBlocksBodySimple | SerieBlocksMasonryFS

type Serie implements Node & Document {
  visible: Boolean
  cover: String
  meta: SerieMeta
  thumbnails: SerieThumbnails
  blocks: [SerieBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SerieMetaShotFilter {
  start: DatetimeFilter
  end: DatetimeFilter
}

input SerieMetaFilter {
  publishedAt: DatetimeFilter
  camera: StringFilter
  film: StringFilter
  shot: SerieMetaShotFilter
  tags: StringFilter
}

input SerieThumbnailsFirstThumbnailFilter {
  url: ImageFilter
  centerImage: StringFilter
}

input SerieThumbnailsSecondThumbnailFilter {
  url: ImageFilter
  centerImage: StringFilter
}

input SerieThumbnailsThirdThumbnailFilter {
  url: ImageFilter
  centerImage: StringFilter
}

input SerieThumbnailsFilter {
  firstThumbnail: SerieThumbnailsFirstThumbnailFilter
  secondThumbnail: SerieThumbnailsSecondThumbnailFilter
  thirdThumbnail: SerieThumbnailsThirdThumbnailFilter
}

input SerieBlocksHeroSerieFilter {
  visible: BooleanFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input SerieBlocksBodySimpleFilter {
  visible: BooleanFilter
  content: RichTextFilter
  size: StringFilter
  center: StringFilter
  align: StringFilter
  paddingTop: StringFilter
  paddingBottom: StringFilter
}

input SerieBlocksMasonryFSColumnsFilter {
  default: StringFilter
  sm: StringFilter
  md: StringFilter
  lg: StringFilter
  xl: StringFilter
}

input SerieBlocksMasonryFSGapFilter {
  default: StringFilter
  sm: StringFilter
  md: StringFilter
  lg: StringFilter
  xl: StringFilter
}

input SerieBlocksMasonryFSImagesFilter {
  label: StringFilter
  url: ImageFilter
  aspectRatio: StringFilter
  centerImage: StringFilter
}

input SerieBlocksMasonryFSFilter {
  label: StringFilter
  visible: BooleanFilter
  columns: SerieBlocksMasonryFSColumnsFilter
  gap: SerieBlocksMasonryFSGapFilter
  images: SerieBlocksMasonryFSImagesFilter
}

input SerieBlocksFilter {
  heroSerie: SerieBlocksHeroSerieFilter
  bodySimple: SerieBlocksBodySimpleFilter
  masonryFS: SerieBlocksMasonryFSFilter
}

input SerieFilter {
  visible: BooleanFilter
  cover: ImageFilter
  meta: SerieMetaFilter
  thumbnails: SerieThumbnailsFilter
  blocks: SerieBlocksFilter
}

type SerieConnectionEdges {
  cursor: String!
  node: Serie
}

type SerieConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SerieConnectionEdges]
}

type PageBlocksHeroBase {
  visible: Boolean
  tagline: String
  headline: String!
  text: String
  align: String
  rotationTitle: String
  backgroundLight: String
  backgroundDark: String
}

type PageBlocksMasonryBaseColumns {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

type PageBlocksMasonryBaseGap {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

type PageBlocksMasonryBaseImages {
  label: String
  url: String!
  aspectRatio: String!
  centerImage: String!
}

type PageBlocksMasonryBase {
  label: String
  visible: Boolean
  columns: PageBlocksMasonryBaseColumns
  gap: PageBlocksMasonryBaseGap
  images: [PageBlocksMasonryBaseImages]
}

type PageBlocksAllSeries {
  visible: Boolean
}

type PageBlocksContactForm {
  visible: Boolean
  offset: Boolean
  backgroundLight: String
  backgroundDark: String
}

type PageBlocksBodySimple {
  visible: Boolean
  content: JSON
  size: String
  center: String
  align: String
  paddingTop: String
  paddingBottom: String
}

union PageBlocks = PageBlocksHeroBase | PageBlocksMasonryBase | PageBlocksAllSeries | PageBlocksContactForm | PageBlocksBodySimple

type Page implements Node & Document {
  visible: Boolean
  title: String!
  description: String
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksHeroBaseFilter {
  visible: BooleanFilter
  tagline: StringFilter
  headline: StringFilter
  text: StringFilter
  align: StringFilter
  rotationTitle: StringFilter
  backgroundLight: StringFilter
  backgroundDark: StringFilter
}

input PageBlocksMasonryBaseColumnsFilter {
  default: StringFilter
  sm: StringFilter
  md: StringFilter
  lg: StringFilter
  xl: StringFilter
}

input PageBlocksMasonryBaseGapFilter {
  default: StringFilter
  sm: StringFilter
  md: StringFilter
  lg: StringFilter
  xl: StringFilter
}

input PageBlocksMasonryBaseImagesFilter {
  label: StringFilter
  url: ImageFilter
  aspectRatio: StringFilter
  centerImage: StringFilter
}

input PageBlocksMasonryBaseFilter {
  label: StringFilter
  visible: BooleanFilter
  columns: PageBlocksMasonryBaseColumnsFilter
  gap: PageBlocksMasonryBaseGapFilter
  images: PageBlocksMasonryBaseImagesFilter
}

input PageBlocksAllSeriesFilter {
  visible: BooleanFilter
}

input PageBlocksContactFormFilter {
  visible: BooleanFilter
  offset: BooleanFilter
  backgroundLight: StringFilter
  backgroundDark: StringFilter
}

input PageBlocksBodySimpleFilter {
  visible: BooleanFilter
  content: RichTextFilter
  size: StringFilter
  center: StringFilter
  align: StringFilter
  paddingTop: StringFilter
  paddingBottom: StringFilter
}

input PageBlocksFilter {
  heroBase: PageBlocksHeroBaseFilter
  masonryBase: PageBlocksMasonryBaseFilter
  allSeries: PageBlocksAllSeriesFilter
  contactForm: PageBlocksContactFormFilter
  bodySimple: PageBlocksBodySimpleFilter
}

input PageFilter {
  visible: BooleanFilter
  title: StringFilter
  description: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type GlobalNavigation {
  visible: Boolean
  href: String
  label: String
}

type GlobalSocial {
  visible: Boolean
  href: String
  label: String
}

type GlobalBackground {
  light: String
  dark: String
}

type Global implements Node & Document {
  navigation: [GlobalNavigation]
  social: [GlobalSocial]
  background: GlobalBackground
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalNavigationFilter {
  visible: BooleanFilter
  href: StringFilter
  label: StringFilter
}

input GlobalSocialFilter {
  visible: BooleanFilter
  href: StringFilter
  label: StringFilter
}

input GlobalBackgroundFilter {
  light: StringFilter
  dark: StringFilter
}

input GlobalFilter {
  navigation: GlobalNavigationFilter
  social: GlobalSocialFilter
  background: GlobalBackgroundFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateSerie(relativePath: String!, params: SerieMutation!): Serie!
  createSerie(relativePath: String!, params: SerieMutation!): Serie!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentUpdateMutation {
  serie: SerieMutation
  page: PageMutation
  global: GlobalMutation
  relativePath: String
}

input DocumentMutation {
  serie: SerieMutation
  page: PageMutation
  global: GlobalMutation
}

input SerieMetaShotMutation {
  start: String
  end: String
}

input SerieMetaMutation {
  publishedAt: String
  camera: String
  film: String
  shot: SerieMetaShotMutation
  tags: [String]
}

input SerieThumbnailsFirstThumbnailMutation {
  url: String
  centerImage: String
}

input SerieThumbnailsSecondThumbnailMutation {
  url: String
  centerImage: String
}

input SerieThumbnailsThirdThumbnailMutation {
  url: String
  centerImage: String
}

input SerieThumbnailsMutation {
  firstThumbnail: SerieThumbnailsFirstThumbnailMutation
  secondThumbnail: SerieThumbnailsSecondThumbnailMutation
  thirdThumbnail: SerieThumbnailsThirdThumbnailMutation
}

input SerieBlocksHeroSerieMutation {
  visible: Boolean
}

input SerieBlocksBodySimpleMutation {
  visible: Boolean
  content: JSON
  size: String
  center: String
  align: String
  paddingTop: String
  paddingBottom: String
}

input SerieBlocksMasonryFSColumnsMutation {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

input SerieBlocksMasonryFSGapMutation {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

input SerieBlocksMasonryFSImagesMutation {
  label: String
  url: String
  aspectRatio: String
  centerImage: String
}

input SerieBlocksMasonryFSMutation {
  label: String
  visible: Boolean
  columns: SerieBlocksMasonryFSColumnsMutation
  gap: SerieBlocksMasonryFSGapMutation
  images: [SerieBlocksMasonryFSImagesMutation]
}

input SerieBlocksMutation {
  heroSerie: SerieBlocksHeroSerieMutation
  bodySimple: SerieBlocksBodySimpleMutation
  masonryFS: SerieBlocksMasonryFSMutation
}

input SerieMutation {
  visible: Boolean
  cover: String
  meta: SerieMetaMutation
  thumbnails: SerieThumbnailsMutation
  blocks: [SerieBlocksMutation]
}

input PageBlocksHeroBaseMutation {
  visible: Boolean
  tagline: String
  headline: String
  text: String
  align: String
  rotationTitle: String
  backgroundLight: String
  backgroundDark: String
}

input PageBlocksMasonryBaseColumnsMutation {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

input PageBlocksMasonryBaseGapMutation {
  default: String
  sm: String
  md: String
  lg: String
  xl: String
}

input PageBlocksMasonryBaseImagesMutation {
  label: String
  url: String
  aspectRatio: String
  centerImage: String
}

input PageBlocksMasonryBaseMutation {
  label: String
  visible: Boolean
  columns: PageBlocksMasonryBaseColumnsMutation
  gap: PageBlocksMasonryBaseGapMutation
  images: [PageBlocksMasonryBaseImagesMutation]
}

input PageBlocksAllSeriesMutation {
  visible: Boolean
}

input PageBlocksContactFormMutation {
  visible: Boolean
  offset: Boolean
  backgroundLight: String
  backgroundDark: String
}

input PageBlocksBodySimpleMutation {
  visible: Boolean
  content: JSON
  size: String
  center: String
  align: String
  paddingTop: String
  paddingBottom: String
}

input PageBlocksMutation {
  heroBase: PageBlocksHeroBaseMutation
  masonryBase: PageBlocksMasonryBaseMutation
  allSeries: PageBlocksAllSeriesMutation
  contactForm: PageBlocksContactFormMutation
  bodySimple: PageBlocksBodySimpleMutation
}

input PageMutation {
  visible: Boolean
  title: String
  description: String
  blocks: [PageBlocksMutation]
}

input GlobalNavigationMutation {
  visible: Boolean
  href: String
  label: String
}

input GlobalSocialMutation {
  visible: Boolean
  href: String
  label: String
}

input GlobalBackgroundMutation {
  light: String
  dark: String
}

input GlobalMutation {
  navigation: [GlobalNavigationMutation]
  social: [GlobalSocialMutation]
  background: GlobalBackgroundMutation
}

schema {
  query: Query
  mutation: Mutation
}
