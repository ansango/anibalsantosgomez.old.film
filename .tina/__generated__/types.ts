//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  serie: Serie;
  serieConnection: SerieConnection;
  page: Page;
  pageConnection: PageConnection;
  global: Global;
  globalConnection: GlobalConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QuerySerieArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QuerySerieConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SerieFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
};

export type DocumentFilter = {
  serie?: InputMaybe<SerieFilter>;
  page?: InputMaybe<PageFilter>;
  global?: InputMaybe<GlobalFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Serie | Page | Global;

export type SerieMetaShot = {
  __typename?: 'SerieMetaShot';
  start?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['String']>;
};

export type SerieMeta = {
  __typename?: 'SerieMeta';
  publishedAt?: Maybe<Scalars['String']>;
  camera?: Maybe<Scalars['String']>;
  film?: Maybe<Scalars['String']>;
  shot?: Maybe<SerieMetaShot>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SerieThumbnailsFirstThumbnail = {
  __typename?: 'SerieThumbnailsFirstThumbnail';
  url?: Maybe<Scalars['String']>;
  centerImage?: Maybe<Scalars['String']>;
};

export type SerieThumbnailsSecondThumbnail = {
  __typename?: 'SerieThumbnailsSecondThumbnail';
  url?: Maybe<Scalars['String']>;
  centerImage?: Maybe<Scalars['String']>;
};

export type SerieThumbnailsThirdThumbnail = {
  __typename?: 'SerieThumbnailsThirdThumbnail';
  url?: Maybe<Scalars['String']>;
  centerImage?: Maybe<Scalars['String']>;
};

export type SerieThumbnails = {
  __typename?: 'SerieThumbnails';
  firstThumbnail?: Maybe<SerieThumbnailsFirstThumbnail>;
  secondThumbnail?: Maybe<SerieThumbnailsSecondThumbnail>;
  thirdThumbnail?: Maybe<SerieThumbnailsThirdThumbnail>;
};

export type SerieBlocksHeroSerie = {
  __typename?: 'SerieBlocksHeroSerie';
  visible?: Maybe<Scalars['Boolean']>;
};

export type SerieBlocksBodySimple = {
  __typename?: 'SerieBlocksBodySimple';
  visible?: Maybe<Scalars['Boolean']>;
  content?: Maybe<Scalars['JSON']>;
  size?: Maybe<Scalars['String']>;
  center?: Maybe<Scalars['String']>;
  align?: Maybe<Scalars['String']>;
  paddingTop?: Maybe<Scalars['String']>;
  paddingBottom?: Maybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsColumns = {
  __typename?: 'SerieBlocksMasonryFSColumns';
  default?: Maybe<Scalars['String']>;
  sm?: Maybe<Scalars['String']>;
  md?: Maybe<Scalars['String']>;
  lg?: Maybe<Scalars['String']>;
  xl?: Maybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsGap = {
  __typename?: 'SerieBlocksMasonryFSGap';
  default?: Maybe<Scalars['String']>;
  sm?: Maybe<Scalars['String']>;
  md?: Maybe<Scalars['String']>;
  lg?: Maybe<Scalars['String']>;
  xl?: Maybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsImages = {
  __typename?: 'SerieBlocksMasonryFSImages';
  label?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  aspectRatio: Scalars['String'];
  centerImage: Scalars['String'];
};

export type SerieBlocksMasonryFs = {
  __typename?: 'SerieBlocksMasonryFS';
  label?: Maybe<Scalars['String']>;
  visible?: Maybe<Scalars['Boolean']>;
  columns?: Maybe<SerieBlocksMasonryFsColumns>;
  gap?: Maybe<SerieBlocksMasonryFsGap>;
  images?: Maybe<Array<Maybe<SerieBlocksMasonryFsImages>>>;
};

export type SerieBlocks = SerieBlocksHeroSerie | SerieBlocksBodySimple | SerieBlocksMasonryFs;

export type Serie = Node & Document & {
  __typename?: 'Serie';
  visible?: Maybe<Scalars['Boolean']>;
  cover?: Maybe<Scalars['String']>;
  meta?: Maybe<SerieMeta>;
  thumbnails?: Maybe<SerieThumbnails>;
  blocks?: Maybe<Array<Maybe<SerieBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type SerieMetaShotFilter = {
  start?: InputMaybe<DatetimeFilter>;
  end?: InputMaybe<DatetimeFilter>;
};

export type SerieMetaFilter = {
  publishedAt?: InputMaybe<DatetimeFilter>;
  camera?: InputMaybe<StringFilter>;
  film?: InputMaybe<StringFilter>;
  shot?: InputMaybe<SerieMetaShotFilter>;
  tags?: InputMaybe<StringFilter>;
};

export type SerieThumbnailsFirstThumbnailFilter = {
  url?: InputMaybe<ImageFilter>;
  centerImage?: InputMaybe<StringFilter>;
};

export type SerieThumbnailsSecondThumbnailFilter = {
  url?: InputMaybe<ImageFilter>;
  centerImage?: InputMaybe<StringFilter>;
};

export type SerieThumbnailsThirdThumbnailFilter = {
  url?: InputMaybe<ImageFilter>;
  centerImage?: InputMaybe<StringFilter>;
};

export type SerieThumbnailsFilter = {
  firstThumbnail?: InputMaybe<SerieThumbnailsFirstThumbnailFilter>;
  secondThumbnail?: InputMaybe<SerieThumbnailsSecondThumbnailFilter>;
  thirdThumbnail?: InputMaybe<SerieThumbnailsThirdThumbnailFilter>;
};

export type SerieBlocksHeroSerieFilter = {
  visible?: InputMaybe<BooleanFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type SerieBlocksBodySimpleFilter = {
  visible?: InputMaybe<BooleanFilter>;
  content?: InputMaybe<RichTextFilter>;
  size?: InputMaybe<StringFilter>;
  center?: InputMaybe<StringFilter>;
  align?: InputMaybe<StringFilter>;
  paddingTop?: InputMaybe<StringFilter>;
  paddingBottom?: InputMaybe<StringFilter>;
};

export type SerieBlocksMasonryFsColumnsFilter = {
  default?: InputMaybe<StringFilter>;
  sm?: InputMaybe<StringFilter>;
  md?: InputMaybe<StringFilter>;
  lg?: InputMaybe<StringFilter>;
  xl?: InputMaybe<StringFilter>;
};

export type SerieBlocksMasonryFsGapFilter = {
  default?: InputMaybe<StringFilter>;
  sm?: InputMaybe<StringFilter>;
  md?: InputMaybe<StringFilter>;
  lg?: InputMaybe<StringFilter>;
  xl?: InputMaybe<StringFilter>;
};

export type SerieBlocksMasonryFsImagesFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<ImageFilter>;
  aspectRatio?: InputMaybe<StringFilter>;
  centerImage?: InputMaybe<StringFilter>;
};

export type SerieBlocksMasonryFsFilter = {
  label?: InputMaybe<StringFilter>;
  visible?: InputMaybe<BooleanFilter>;
  columns?: InputMaybe<SerieBlocksMasonryFsColumnsFilter>;
  gap?: InputMaybe<SerieBlocksMasonryFsGapFilter>;
  images?: InputMaybe<SerieBlocksMasonryFsImagesFilter>;
};

export type SerieBlocksFilter = {
  heroSerie?: InputMaybe<SerieBlocksHeroSerieFilter>;
  bodySimple?: InputMaybe<SerieBlocksBodySimpleFilter>;
  masonryFS?: InputMaybe<SerieBlocksMasonryFsFilter>;
};

export type SerieFilter = {
  visible?: InputMaybe<BooleanFilter>;
  cover?: InputMaybe<ImageFilter>;
  meta?: InputMaybe<SerieMetaFilter>;
  thumbnails?: InputMaybe<SerieThumbnailsFilter>;
  blocks?: InputMaybe<SerieBlocksFilter>;
};

export type SerieConnectionEdges = {
  __typename?: 'SerieConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Serie>;
};

export type SerieConnection = Connection & {
  __typename?: 'SerieConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<SerieConnectionEdges>>>;
};

export type PageBlocksHeroBase = {
  __typename?: 'PageBlocksHeroBase';
  visible?: Maybe<Scalars['Boolean']>;
  tagline?: Maybe<Scalars['String']>;
  headline: Scalars['String'];
  text?: Maybe<Scalars['String']>;
  align?: Maybe<Scalars['String']>;
  rotationTitle?: Maybe<Scalars['String']>;
  backgroundLight?: Maybe<Scalars['String']>;
  backgroundDark?: Maybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseColumns = {
  __typename?: 'PageBlocksMasonryBaseColumns';
  default?: Maybe<Scalars['String']>;
  sm?: Maybe<Scalars['String']>;
  md?: Maybe<Scalars['String']>;
  lg?: Maybe<Scalars['String']>;
  xl?: Maybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseGap = {
  __typename?: 'PageBlocksMasonryBaseGap';
  default?: Maybe<Scalars['String']>;
  sm?: Maybe<Scalars['String']>;
  md?: Maybe<Scalars['String']>;
  lg?: Maybe<Scalars['String']>;
  xl?: Maybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseImages = {
  __typename?: 'PageBlocksMasonryBaseImages';
  label?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  aspectRatio: Scalars['String'];
  centerImage: Scalars['String'];
};

export type PageBlocksMasonryBase = {
  __typename?: 'PageBlocksMasonryBase';
  label?: Maybe<Scalars['String']>;
  visible?: Maybe<Scalars['Boolean']>;
  columns?: Maybe<PageBlocksMasonryBaseColumns>;
  gap?: Maybe<PageBlocksMasonryBaseGap>;
  images?: Maybe<Array<Maybe<PageBlocksMasonryBaseImages>>>;
};

export type PageBlocksAllSeries = {
  __typename?: 'PageBlocksAllSeries';
  visible?: Maybe<Scalars['Boolean']>;
};

export type PageBlocksContactForm = {
  __typename?: 'PageBlocksContactForm';
  visible?: Maybe<Scalars['Boolean']>;
  offset?: Maybe<Scalars['Boolean']>;
  backgroundLight?: Maybe<Scalars['String']>;
  backgroundDark?: Maybe<Scalars['String']>;
};

export type PageBlocksBodySimple = {
  __typename?: 'PageBlocksBodySimple';
  visible?: Maybe<Scalars['Boolean']>;
  content?: Maybe<Scalars['JSON']>;
  size?: Maybe<Scalars['String']>;
  center?: Maybe<Scalars['String']>;
  align?: Maybe<Scalars['String']>;
  paddingTop?: Maybe<Scalars['String']>;
  paddingBottom?: Maybe<Scalars['String']>;
};

export type PageBlocks = PageBlocksHeroBase | PageBlocksMasonryBase | PageBlocksAllSeries | PageBlocksContactForm | PageBlocksBodySimple;

export type Page = Node & Document & {
  __typename?: 'Page';
  visible?: Maybe<Scalars['Boolean']>;
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  blocks?: Maybe<Array<Maybe<PageBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PageBlocksHeroBaseFilter = {
  visible?: InputMaybe<BooleanFilter>;
  tagline?: InputMaybe<StringFilter>;
  headline?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  align?: InputMaybe<StringFilter>;
  rotationTitle?: InputMaybe<StringFilter>;
  backgroundLight?: InputMaybe<StringFilter>;
  backgroundDark?: InputMaybe<StringFilter>;
};

export type PageBlocksMasonryBaseColumnsFilter = {
  default?: InputMaybe<StringFilter>;
  sm?: InputMaybe<StringFilter>;
  md?: InputMaybe<StringFilter>;
  lg?: InputMaybe<StringFilter>;
  xl?: InputMaybe<StringFilter>;
};

export type PageBlocksMasonryBaseGapFilter = {
  default?: InputMaybe<StringFilter>;
  sm?: InputMaybe<StringFilter>;
  md?: InputMaybe<StringFilter>;
  lg?: InputMaybe<StringFilter>;
  xl?: InputMaybe<StringFilter>;
};

export type PageBlocksMasonryBaseImagesFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<ImageFilter>;
  aspectRatio?: InputMaybe<StringFilter>;
  centerImage?: InputMaybe<StringFilter>;
};

export type PageBlocksMasonryBaseFilter = {
  label?: InputMaybe<StringFilter>;
  visible?: InputMaybe<BooleanFilter>;
  columns?: InputMaybe<PageBlocksMasonryBaseColumnsFilter>;
  gap?: InputMaybe<PageBlocksMasonryBaseGapFilter>;
  images?: InputMaybe<PageBlocksMasonryBaseImagesFilter>;
};

export type PageBlocksAllSeriesFilter = {
  visible?: InputMaybe<BooleanFilter>;
};

export type PageBlocksContactFormFilter = {
  visible?: InputMaybe<BooleanFilter>;
  offset?: InputMaybe<BooleanFilter>;
  backgroundLight?: InputMaybe<StringFilter>;
  backgroundDark?: InputMaybe<StringFilter>;
};

export type PageBlocksBodySimpleFilter = {
  visible?: InputMaybe<BooleanFilter>;
  content?: InputMaybe<RichTextFilter>;
  size?: InputMaybe<StringFilter>;
  center?: InputMaybe<StringFilter>;
  align?: InputMaybe<StringFilter>;
  paddingTop?: InputMaybe<StringFilter>;
  paddingBottom?: InputMaybe<StringFilter>;
};

export type PageBlocksFilter = {
  heroBase?: InputMaybe<PageBlocksHeroBaseFilter>;
  masonryBase?: InputMaybe<PageBlocksMasonryBaseFilter>;
  allSeries?: InputMaybe<PageBlocksAllSeriesFilter>;
  contactForm?: InputMaybe<PageBlocksContactFormFilter>;
  bodySimple?: InputMaybe<PageBlocksBodySimpleFilter>;
};

export type PageFilter = {
  visible?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  blocks?: InputMaybe<PageBlocksFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type GlobalNavigation = {
  __typename?: 'GlobalNavigation';
  visible?: Maybe<Scalars['Boolean']>;
  href?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

export type GlobalSocial = {
  __typename?: 'GlobalSocial';
  visible?: Maybe<Scalars['Boolean']>;
  href?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

export type GlobalBackground = {
  __typename?: 'GlobalBackground';
  light?: Maybe<Scalars['String']>;
  dark?: Maybe<Scalars['String']>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  navigation?: Maybe<Array<Maybe<GlobalNavigation>>>;
  social?: Maybe<Array<Maybe<GlobalSocial>>>;
  background?: Maybe<GlobalBackground>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type GlobalNavigationFilter = {
  visible?: InputMaybe<BooleanFilter>;
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type GlobalSocialFilter = {
  visible?: InputMaybe<BooleanFilter>;
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type GlobalBackgroundFilter = {
  light?: InputMaybe<StringFilter>;
  dark?: InputMaybe<StringFilter>;
};

export type GlobalFilter = {
  navigation?: InputMaybe<GlobalNavigationFilter>;
  social?: InputMaybe<GlobalSocialFilter>;
  background?: InputMaybe<GlobalBackgroundFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateSerie: Serie;
  createSerie: Serie;
  updatePage: Page;
  createPage: Page;
  updateGlobal: Global;
  createGlobal: Global;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateSerieArgs = {
  relativePath: Scalars['String'];
  params: SerieMutation;
};


export type MutationCreateSerieArgs = {
  relativePath: Scalars['String'];
  params: SerieMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};

export type DocumentUpdateMutation = {
  serie?: InputMaybe<SerieMutation>;
  page?: InputMaybe<PageMutation>;
  global?: InputMaybe<GlobalMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  serie?: InputMaybe<SerieMutation>;
  page?: InputMaybe<PageMutation>;
  global?: InputMaybe<GlobalMutation>;
};

export type SerieMetaShotMutation = {
  start?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['String']>;
};

export type SerieMetaMutation = {
  publishedAt?: InputMaybe<Scalars['String']>;
  camera?: InputMaybe<Scalars['String']>;
  film?: InputMaybe<Scalars['String']>;
  shot?: InputMaybe<SerieMetaShotMutation>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type SerieThumbnailsFirstThumbnailMutation = {
  url?: InputMaybe<Scalars['String']>;
  centerImage?: InputMaybe<Scalars['String']>;
};

export type SerieThumbnailsSecondThumbnailMutation = {
  url?: InputMaybe<Scalars['String']>;
  centerImage?: InputMaybe<Scalars['String']>;
};

export type SerieThumbnailsThirdThumbnailMutation = {
  url?: InputMaybe<Scalars['String']>;
  centerImage?: InputMaybe<Scalars['String']>;
};

export type SerieThumbnailsMutation = {
  firstThumbnail?: InputMaybe<SerieThumbnailsFirstThumbnailMutation>;
  secondThumbnail?: InputMaybe<SerieThumbnailsSecondThumbnailMutation>;
  thirdThumbnail?: InputMaybe<SerieThumbnailsThirdThumbnailMutation>;
};

export type SerieBlocksHeroSerieMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
};

export type SerieBlocksBodySimpleMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  content?: InputMaybe<Scalars['JSON']>;
  size?: InputMaybe<Scalars['String']>;
  center?: InputMaybe<Scalars['String']>;
  align?: InputMaybe<Scalars['String']>;
  paddingTop?: InputMaybe<Scalars['String']>;
  paddingBottom?: InputMaybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsColumnsMutation = {
  default?: InputMaybe<Scalars['String']>;
  sm?: InputMaybe<Scalars['String']>;
  md?: InputMaybe<Scalars['String']>;
  lg?: InputMaybe<Scalars['String']>;
  xl?: InputMaybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsGapMutation = {
  default?: InputMaybe<Scalars['String']>;
  sm?: InputMaybe<Scalars['String']>;
  md?: InputMaybe<Scalars['String']>;
  lg?: InputMaybe<Scalars['String']>;
  xl?: InputMaybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsImagesMutation = {
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  aspectRatio?: InputMaybe<Scalars['String']>;
  centerImage?: InputMaybe<Scalars['String']>;
};

export type SerieBlocksMasonryFsMutation = {
  label?: InputMaybe<Scalars['String']>;
  visible?: InputMaybe<Scalars['Boolean']>;
  columns?: InputMaybe<SerieBlocksMasonryFsColumnsMutation>;
  gap?: InputMaybe<SerieBlocksMasonryFsGapMutation>;
  images?: InputMaybe<Array<InputMaybe<SerieBlocksMasonryFsImagesMutation>>>;
};

export type SerieBlocksMutation = {
  heroSerie?: InputMaybe<SerieBlocksHeroSerieMutation>;
  bodySimple?: InputMaybe<SerieBlocksBodySimpleMutation>;
  masonryFS?: InputMaybe<SerieBlocksMasonryFsMutation>;
};

export type SerieMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  cover?: InputMaybe<Scalars['String']>;
  meta?: InputMaybe<SerieMetaMutation>;
  thumbnails?: InputMaybe<SerieThumbnailsMutation>;
  blocks?: InputMaybe<Array<InputMaybe<SerieBlocksMutation>>>;
};

export type PageBlocksHeroBaseMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  tagline?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  align?: InputMaybe<Scalars['String']>;
  rotationTitle?: InputMaybe<Scalars['String']>;
  backgroundLight?: InputMaybe<Scalars['String']>;
  backgroundDark?: InputMaybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseColumnsMutation = {
  default?: InputMaybe<Scalars['String']>;
  sm?: InputMaybe<Scalars['String']>;
  md?: InputMaybe<Scalars['String']>;
  lg?: InputMaybe<Scalars['String']>;
  xl?: InputMaybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseGapMutation = {
  default?: InputMaybe<Scalars['String']>;
  sm?: InputMaybe<Scalars['String']>;
  md?: InputMaybe<Scalars['String']>;
  lg?: InputMaybe<Scalars['String']>;
  xl?: InputMaybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseImagesMutation = {
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  aspectRatio?: InputMaybe<Scalars['String']>;
  centerImage?: InputMaybe<Scalars['String']>;
};

export type PageBlocksMasonryBaseMutation = {
  label?: InputMaybe<Scalars['String']>;
  visible?: InputMaybe<Scalars['Boolean']>;
  columns?: InputMaybe<PageBlocksMasonryBaseColumnsMutation>;
  gap?: InputMaybe<PageBlocksMasonryBaseGapMutation>;
  images?: InputMaybe<Array<InputMaybe<PageBlocksMasonryBaseImagesMutation>>>;
};

export type PageBlocksAllSeriesMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
};

export type PageBlocksContactFormMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Boolean']>;
  backgroundLight?: InputMaybe<Scalars['String']>;
  backgroundDark?: InputMaybe<Scalars['String']>;
};

export type PageBlocksBodySimpleMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  content?: InputMaybe<Scalars['JSON']>;
  size?: InputMaybe<Scalars['String']>;
  center?: InputMaybe<Scalars['String']>;
  align?: InputMaybe<Scalars['String']>;
  paddingTop?: InputMaybe<Scalars['String']>;
  paddingBottom?: InputMaybe<Scalars['String']>;
};

export type PageBlocksMutation = {
  heroBase?: InputMaybe<PageBlocksHeroBaseMutation>;
  masonryBase?: InputMaybe<PageBlocksMasonryBaseMutation>;
  allSeries?: InputMaybe<PageBlocksAllSeriesMutation>;
  contactForm?: InputMaybe<PageBlocksContactFormMutation>;
  bodySimple?: InputMaybe<PageBlocksBodySimpleMutation>;
};

export type PageMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  blocks?: InputMaybe<Array<InputMaybe<PageBlocksMutation>>>;
};

export type GlobalNavigationMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
};

export type GlobalSocialMutation = {
  visible?: InputMaybe<Scalars['Boolean']>;
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
};

export type GlobalBackgroundMutation = {
  light?: InputMaybe<Scalars['String']>;
  dark?: InputMaybe<Scalars['String']>;
};

export type GlobalMutation = {
  navigation?: InputMaybe<Array<InputMaybe<GlobalNavigationMutation>>>;
  social?: InputMaybe<Array<InputMaybe<GlobalSocialMutation>>>;
  background?: InputMaybe<GlobalBackgroundMutation>;
};

export type SeriePartsFragment = { __typename?: 'Serie', visible?: boolean | null, cover?: string | null, meta?: { __typename: 'SerieMeta', publishedAt?: string | null, camera?: string | null, film?: string | null, tags?: Array<string | null> | null, shot?: { __typename: 'SerieMetaShot', start?: string | null, end?: string | null } | null } | null, thumbnails?: { __typename: 'SerieThumbnails', firstThumbnail?: { __typename: 'SerieThumbnailsFirstThumbnail', url?: string | null, centerImage?: string | null } | null, secondThumbnail?: { __typename: 'SerieThumbnailsSecondThumbnail', url?: string | null, centerImage?: string | null } | null, thirdThumbnail?: { __typename: 'SerieThumbnailsThirdThumbnail', url?: string | null, centerImage?: string | null } | null } | null, blocks?: Array<{ __typename: 'SerieBlocksHeroSerie', visible?: boolean | null } | { __typename: 'SerieBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | { __typename: 'SerieBlocksMasonryFS', label?: string | null, visible?: boolean | null, columns?: { __typename: 'SerieBlocksMasonryFSColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'SerieBlocksMasonryFSGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'SerieBlocksMasonryFSImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | null> | null };

export type PagePartsFragment = { __typename?: 'Page', visible?: boolean | null, title: string, description?: string | null, blocks?: Array<{ __typename: 'PageBlocksHeroBase', visible?: boolean | null, tagline?: string | null, headline: string, text?: string | null, align?: string | null, rotationTitle?: string | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksMasonryBase', label?: string | null, visible?: boolean | null, columns?: { __typename: 'PageBlocksMasonryBaseColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'PageBlocksMasonryBaseGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'PageBlocksMasonryBaseImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | { __typename: 'PageBlocksAllSeries', visible?: boolean | null } | { __typename: 'PageBlocksContactForm', visible?: boolean | null, offset?: boolean | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | null> | null };

export type GlobalPartsFragment = { __typename?: 'Global', navigation?: Array<{ __typename: 'GlobalNavigation', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, social?: Array<{ __typename: 'GlobalSocial', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, background?: { __typename: 'GlobalBackground', light?: string | null, dark?: string | null } | null };

export type SerieQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type SerieQuery = { __typename?: 'Query', serie: { __typename?: 'Serie', id: string, visible?: boolean | null, cover?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, meta?: { __typename: 'SerieMeta', publishedAt?: string | null, camera?: string | null, film?: string | null, tags?: Array<string | null> | null, shot?: { __typename: 'SerieMetaShot', start?: string | null, end?: string | null } | null } | null, thumbnails?: { __typename: 'SerieThumbnails', firstThumbnail?: { __typename: 'SerieThumbnailsFirstThumbnail', url?: string | null, centerImage?: string | null } | null, secondThumbnail?: { __typename: 'SerieThumbnailsSecondThumbnail', url?: string | null, centerImage?: string | null } | null, thirdThumbnail?: { __typename: 'SerieThumbnailsThirdThumbnail', url?: string | null, centerImage?: string | null } | null } | null, blocks?: Array<{ __typename: 'SerieBlocksHeroSerie', visible?: boolean | null } | { __typename: 'SerieBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | { __typename: 'SerieBlocksMasonryFS', label?: string | null, visible?: boolean | null, columns?: { __typename: 'SerieBlocksMasonryFSColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'SerieBlocksMasonryFSGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'SerieBlocksMasonryFSImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | null> | null } };

export type SerieConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SerieFilter>;
}>;


export type SerieConnectionQuery = { __typename?: 'Query', serieConnection: { __typename?: 'SerieConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SerieConnectionEdges', cursor: string, node?: { __typename?: 'Serie', id: string, visible?: boolean | null, cover?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, meta?: { __typename: 'SerieMeta', publishedAt?: string | null, camera?: string | null, film?: string | null, tags?: Array<string | null> | null, shot?: { __typename: 'SerieMetaShot', start?: string | null, end?: string | null } | null } | null, thumbnails?: { __typename: 'SerieThumbnails', firstThumbnail?: { __typename: 'SerieThumbnailsFirstThumbnail', url?: string | null, centerImage?: string | null } | null, secondThumbnail?: { __typename: 'SerieThumbnailsSecondThumbnail', url?: string | null, centerImage?: string | null } | null, thirdThumbnail?: { __typename: 'SerieThumbnailsThirdThumbnail', url?: string | null, centerImage?: string | null } | null } | null, blocks?: Array<{ __typename: 'SerieBlocksHeroSerie', visible?: boolean | null } | { __typename: 'SerieBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | { __typename: 'SerieBlocksMasonryFS', label?: string | null, visible?: boolean | null, columns?: { __typename: 'SerieBlocksMasonryFSColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'SerieBlocksMasonryFSGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'SerieBlocksMasonryFSImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, visible?: boolean | null, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlocksHeroBase', visible?: boolean | null, tagline?: string | null, headline: string, text?: string | null, align?: string | null, rotationTitle?: string | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksMasonryBase', label?: string | null, visible?: boolean | null, columns?: { __typename: 'PageBlocksMasonryBaseColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'PageBlocksMasonryBaseGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'PageBlocksMasonryBaseImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | { __typename: 'PageBlocksAllSeries', visible?: boolean | null } | { __typename: 'PageBlocksContactForm', visible?: boolean | null, offset?: boolean | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename?: 'Page', id: string, visible?: boolean | null, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlocksHeroBase', visible?: boolean | null, tagline?: string | null, headline: string, text?: string | null, align?: string | null, rotationTitle?: string | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksMasonryBase', label?: string | null, visible?: boolean | null, columns?: { __typename: 'PageBlocksMasonryBaseColumns', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, gap?: { __typename: 'PageBlocksMasonryBaseGap', default?: string | null, sm?: string | null, md?: string | null, lg?: string | null, xl?: string | null } | null, images?: Array<{ __typename: 'PageBlocksMasonryBaseImages', label?: string | null, url: string, aspectRatio: string, centerImage: string } | null> | null } | { __typename: 'PageBlocksAllSeries', visible?: boolean | null } | { __typename: 'PageBlocksContactForm', visible?: boolean | null, offset?: boolean | null, backgroundLight?: string | null, backgroundDark?: string | null } | { __typename: 'PageBlocksBodySimple', visible?: boolean | null, content?: any | null, size?: string | null, center?: string | null, align?: string | null, paddingTop?: string | null, paddingBottom?: string | null } | null> | null } | null } | null> | null } };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: Array<{ __typename: 'GlobalNavigation', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, social?: Array<{ __typename: 'GlobalSocial', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, background?: { __typename: 'GlobalBackground', light?: string | null, dark?: string | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: Array<{ __typename: 'GlobalNavigation', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, social?: Array<{ __typename: 'GlobalSocial', visible?: boolean | null, href?: string | null, label?: string | null } | null> | null, background?: { __typename: 'GlobalBackground', light?: string | null, dark?: string | null } | null } | null } | null> | null } };

export const SeriePartsFragmentDoc = gql`
    fragment SerieParts on Serie {
  visible
  cover
  meta {
    __typename
    publishedAt
    camera
    film
    shot {
      __typename
      start
      end
    }
    tags
  }
  thumbnails {
    __typename
    firstThumbnail {
      __typename
      url
      centerImage
    }
    secondThumbnail {
      __typename
      url
      centerImage
    }
    thirdThumbnail {
      __typename
      url
      centerImage
    }
  }
  blocks {
    __typename
    ... on SerieBlocksHeroSerie {
      visible
    }
    ... on SerieBlocksBodySimple {
      visible
      content
      size
      center
      align
      paddingTop
      paddingBottom
    }
    ... on SerieBlocksMasonryFS {
      label
      visible
      columns {
        __typename
        default
        sm
        md
        lg
        xl
      }
      gap {
        __typename
        default
        sm
        md
        lg
        xl
      }
      images {
        __typename
        label
        url
        aspectRatio
        centerImage
      }
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  visible
  title
  description
  blocks {
    __typename
    ... on PageBlocksHeroBase {
      visible
      tagline
      headline
      text
      align
      rotationTitle
      backgroundLight
      backgroundDark
    }
    ... on PageBlocksMasonryBase {
      label
      visible
      columns {
        __typename
        default
        sm
        md
        lg
        xl
      }
      gap {
        __typename
        default
        sm
        md
        lg
        xl
      }
      images {
        __typename
        label
        url
        aspectRatio
        centerImage
      }
    }
    ... on PageBlocksAllSeries {
      visible
    }
    ... on PageBlocksContactForm {
      visible
      offset
      backgroundLight
      backgroundDark
    }
    ... on PageBlocksBodySimple {
      visible
      content
      size
      center
      align
      paddingTop
      paddingBottom
    }
  }
}
    `;
export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  navigation {
    __typename
    visible
    href
    label
  }
  social {
    __typename
    visible
    href
    label
  }
  background {
    __typename
    light
    dark
  }
}
    `;
export const SerieDocument = gql`
    query serie($relativePath: String!) {
  serie(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SerieParts
  }
}
    ${SeriePartsFragmentDoc}`;
export const SerieConnectionDocument = gql`
    query serieConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SerieFilter) {
  serieConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SerieParts
      }
    }
  }
}
    ${SeriePartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      serie(variables: SerieQueryVariables, options?: C): Promise<{data: SerieQuery, variables: SerieQueryVariables, query: string}> {
        return requester<{data: SerieQuery, variables: SerieQueryVariables, query: string}, SerieQueryVariables>(SerieDocument, variables, options);
      },
    serieConnection(variables?: SerieConnectionQueryVariables, options?: C): Promise<{data: SerieConnectionQuery, variables: SerieConnectionQueryVariables, query: string}> {
        return requester<{data: SerieConnectionQuery, variables: SerieConnectionQueryVariables, query: string}, SerieConnectionQueryVariables>(SerieConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  